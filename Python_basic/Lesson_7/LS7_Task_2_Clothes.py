""" Author: Maksim Sapunov msdir6199@gmail.com 26.01.2021"""

# # 2. Реализовать проект расчета суммарного расхода ткани на производство одежды.
# +Основная сущность (класс) этого проекта — одежда, которая может иметь определенное название.
# +К типам одежды в этом проекте относятся пальто и костюм.
# +У этих типов одежды существуют параметры: размер (для пальто) и рост (для костюма).
# +Это могут быть обычные числа: V и H, соответственно.
# Для определения расхода ткани по каждому типу одежды использовать формулы:
# для пальто (V/6.5 + 0.5), для костюма (2 * H + 0.3).
# Проверить работу этих методов на реальных данных.
# Реализовать общий подсчет расхода ткани.
# Проверить на практике полученные на этом уроке знания: реализовать абстрактные классы для основных классов проекта,
# проверить на практике работу декоратора @property.


class Clothes:
    """ Класс содержит общее представление об одежде пользователя и методы управления ею"""
    _name = ['Костюм', 'Пальто', 'Рубашка']
    _height: int = 176  # H
    _size: int = 50  # V
    _user = 'Максим'

    def tissue_debit(self):  # !Синяя изолента!
        """ Возвращает расчитанную площадь ткани для изготовления изделия"""
        if isinstance(self, Clothes):
            return str(self.name + ': Для изготовления потребуется ' + str(self.formula) + ' см2 ткани.')
        # !Синяя изолента! У родительского класса нет формулы и имени одежды
        else:
            print('Вы передали неправильный объект для расчета.')

    @classmethod
    def get_my_param(cls):
        """ Выводит на экран заданные ранее параметры одежды пользователя"""
        return {'Имя': Clothes._user, 'Рост': Clothes._height, 'Размер одежды': Clothes._size}

    @property
    def size(self):
        """ Возвращает размер"""
        return Clothes._size

    @property
    def height(self):
        """ Возвращает рост"""
        return Clothes._height


class Costume(Clothes):
    """ Создает объект одежды-костюм"""

    def __init__(self):
        self.name = Clothes._name[0]
        self.formula = round((2 * self.height + 0.3), 2)


class Coat(Clothes):
    """ Создает объект одежды-пальто"""

    def __init__(self):
        self.name = Clothes._name[1]
        self.formula = round((self.size / 6.5 + 0.5), 2)


class Shirt(Clothes):
    """ Создает объект одежды-рубашка"""

    # И далее таких классов можно здесь добавить необходимое количество, добавляя наименование в список класса,
    # и параметры в __init__ создаваемого объекта. Таким образом реализована возможность в дальнейшем модернизировать
    # программу.
    def __init__(self):
        self.name = Clothes._name[2]
        self.formula = round((self.height / 4 + 0.1), 2)


Costume_1 = Costume()
Coat_1 = Coat()
Shirt = Shirt()

print(Costume_1.tissue_debit(), Coat_1.tissue_debit(), Shirt.tissue_debit(), sep='\n')
print(Clothes.get_my_param())
