""" Author: Maksim Sapunov msdir6199@gmail.com 26.01.2021"""


# # 3. Реализовать программу работы с органическими клетками.
# + Необходимо создать класс Клетка.
# + В его конструкторе инициализировать параметр, соответствующий количеству клеток (целое число).
# + В классе должны быть реализованы методы перегрузки арифметических операторов:
# + сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__truediv__()).
# + Данные методы должны применяться ТОЛЬКО к клеткам и выполнять увеличение, уменьшение, умножение и обычное
# (не целочисленное) деление клеток, соответственно.
#
# + В методе деления должно осуществляться округление значения до целого числа.
#
# +Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме
# ячеек исходных двух клеток.
#
# +Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек
# двух клеток больше нуля, иначе выводить соответствующее сообщение.
#
# +Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется как произведение
# количества ячеек этих двух клеток.
#
# +Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как целочисленное деление
# количества ячеек этих двух клеток.
#
# +В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
#
# +Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному
# аргументу.
# +Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.


class Cell:
    """ Общее представление клетки"""

    def __init__(self, start_number_of_cells=1):
        """
        Функция инициализирует конструктор класса Cell.
        :param start_number_of_cells: int - количество клеток в начале процесса.
        :type start_number_of_cells: int - количество клеток на старте (по умолчанию 1)
        """
        self.number = int(start_number_of_cells)

    def __add__(self, other):
        """ Функция обеспечивает перегрузку оператора сложения. """
        result = self.number + other.number
        return result

    def __sub__(self, other):
        """ Функция обеспечивает перегрузку оператора вычитания. """
        if self.number >= other.number:
            result = self.number - other.number
            return result
        else:
            print('Выполнение данной операци невозможно!\n Параметры остаются прежними.')
            return self.number

    def __mul__(self, other):
        """ Функция обеспечивает перегрузку оператора умножения. """
        result = self.number * other.number
        return result

    def __truediv__(self, other):
        """ Функция обеспечивает перегрузку оператора целочисленного деления """
        result = self.number // other.number
        return result

    def make_order(self, links):
        """
        Функция позволяет распределить ячейки по рядам с заданным количеством,
        каждая ячейка обозночается символом '*'.
        :param - links: int - количество символов в строке вывода
        :return - message: str - отчет о завершении работы функции
        """
        message = '*' * int(self.number)
        container = [message[i:i+links] for i in range(0, len(message), links)]
        for el in container:
            print(el)
        return 'функция выполнила свою работу'


# Основной блок программы (проверка работоспособности всех операторов и метода)

a = Cell(54)
b = Cell(33)
c = Cell()

print(a + b)
print(a - b)
print(a * b)
print(a / b)
print(c.number)

print(a.make_order(15))
